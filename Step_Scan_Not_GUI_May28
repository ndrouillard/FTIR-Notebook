import numpy as np
import matplotlib.pyplot as plt
from bitlib import *
import serial
import time

global TRUE, FALSE, N
N = 500 #number of steps
TRUE = 1
FALSE = 0

#%%Variables for data collection
global t_vec, y, w_vec, yw_vec, all_t_vec, all_y, all_w_vec, all_yw_vec, pos_array
tic = time.time()
t_vec1 = np.empty(1)
#data = np.empty(MY_SIZE)
y = np.empty(1)
w_vec1 = np.empty(1)
yw_vec1 = np.empty(1)
old_time = 0

#%% Setup the Bitscope
#%% Open the COM port
ser = serial.Serial('/dev/ttyUSB_MICRONIX',38400)

#%% Micronix Stuff
#Home the stage
def home():

    ser.write(b'1HOM\r')
    ser.flush()
    time.sleep(1)
    #ser.write(b'1WTM42\r')
    ser.write(b'1WST\r')
    time.sleep(1)
    print("stopped")
    ser.flush()
    #isstopped = ser.readline()
    ser.write(b'1ZRO\r')
    time.sleep(1)
    ser.flush()
    #zeroed = ser.readline()
    print("zeroed")

#%% Setup stage parameters for scanning
def params():
    min_pos = -1
    max_pos = 1
    v = 2.56
    vel_str = "1VEL" + str(v) + "\r"
    # ser.write(b'1POS?\r')
    # ser.write(b'1MVA0\r')
    vel_byt = str.encode(vel_str) #encode soft travel limit in the negative direction
    ser.write(vel_byt) #write it to the controller
    ser.flush()
    #ser.write(b'1VEL998.0\r') #set velocity to 998.0 mm/s
    time.sleep(1)
    ser.flush()
    ser.write(b'1VEL?\r')
    vel = ser.readline()
    print("Velocity set to:", vel)

    min_pos_str = "1TLN" + str(min_pos) + "\r"
    # ser.write(b'1POS?\r')
    # ser.write(b'1MVA0\r')
    min_pos_byt = str.encode(min_pos_str) #encode soft travel limit in the negative direction
    ser.write(min_pos_byt) #write it to the controller
    ser.flush()
    #neglim = ser.readline()
    time.sleep(1)
    #print("neglim")

    max_pos_str = "1TLP" + str(max_pos) + "\r"
    max_pos_byt = str.encode(max_pos_str)
    ser.write(max_pos_byt)
    ser.flush()
    #poslim = ser.readline()
    time.sleep(1)
    #print("poslim")

    ser.write(b'1EPL1\r') #ensure the correct encoder polarity for the feedback loop
    ser.flush()
    #polset = ser.readline()
    ser.write(b'1FBK3\r') #closed loop feedback mode
    ser.flush()
    #fbkset = ser.readline()
    ser.write(b'4DBD5,0\r') #set closed loop deadband parameters (0 means it will never timeout)
    ser.flush()
    time.sleep(1)
    print("Params set")
    #dbdset = ser.readline()

#%% Close COM port (important)
def close():

    ser.close()

def bitscope_setup(size,rate):

    #global MY_SIZE, MY_RATE, TRUE, FALSE
    global TRUE, FALSE
    #Setup general parameters for the capture
    MY_SIZE = size
    MY_RATE = rate
    print("Starting: Attempting to open one devices...")

    #Attempt to open 1 device at /dev/ttyUSBx
    #Make sure you run 'cd /dev/' followed by 'ls ' on terminal to see if the device is present.

    #See return value to see the number of successfully opened devices.
    if (BL_Open('USB:/dev/ttyUSB_BITSCOPE',1)==0):
    #if (BL_Open('USB:/dev/ttyUSB_BITSCOPE',1)==0):
        print("  FAILED: all devices not found (check your probe file)."    )
    else:
        #Successfully opened one device
        #Report the number of devices opened, and the library version used
        #print('\nNumber of devices opened: %s' ,BL_Count(BL_COUNT_DEVICE))
        print(" Library: %s (%s)\n\n" , (BL_Version(BL_VERSION_LIBRARY),BL_Version(BL_VERSION_BINDING)))

        #Select the first device opened, found at location 0 by default.
        BL_Select(BL_SELECT_DEVICE,0)

        #Setup acquisition in FAST mode, where the whole of the 12288 samples in
        #the buffer are used by one channel alone.
        BL_Mode(BL_MODE_FAST)
        #BL_Mode(BL_MODE_STREAM)

        #Report the capture details
        print(" Capture: %d @ %.0fHz = %fs" , (BL_Size(),BL_Rate(MY_RATE),BL_Time()))

        #Setup channel-nonspecific parameters for capture.
        BL_Intro(BL_ZERO); #How many seconds to capture before the trigger event- 0 by default
        BL_Delay(BL_ZERO); #How many seconds to capture after the trigger event- 0 by default
        BL_Rate(MY_RATE); # optional, default BL_MAX_RATE
        BL_Size(MY_SIZE); # optional default BL_MAX_SIZE

        #Set up channel A properties - A has channel index 0, B has 1.
        #All the subsequent properties belong to channel A until another is selected.
        BL_Select(BL_SELECT_CHANNEL,0);

        #Setup a falling-edge trigger at 0.999V.
        #Other options are BL_TRIG_RISE, BL_TRIG_HIGH, BL_TRIG_LOW.
        BL_Trigger(0.999,BL_TRIG_FALL); # This is optional when untriggered BL_Trace() is used
        #BL_Trigger(4)

        BL_Select(BL_SELECT_SOURCE,BL_SOURCE_POD); # use the POD input - the only one available
        BL_Range(BL_Count(BL_COUNT_RANGE)); # maximum range for y-axis - use this whenever possible
        #BL_Range(12)
        BL_Offset(BL_ZERO); # Y-axis offset is set to zero as BL_ZERO

        #Enable the currently selected channel, i.e. channel A
        #This ensures the recorded data goes into the memory-buffer in Bitscope device
        BL_Enable(TRUE);

        print(" Bitscope Enabled")

#Record data from Bitscope and move stage
def record():

    global TRUE, FALSE, N
    #DATA = np.empty(100)
    #pos_array = np.empty(100)
    DATA = 0
    pos_array = 0
    #ser.write(b'1VEL998.0\r') #set velocity to 998.0 mm/s
   # time.sleep(1)
   # ser.flush()
    bitscope_setup(100,60000)
    #ser.write(b'MLN\r')
    #ser.readline()
    #time.sleep(1)
    #ser.flush()
    t0 = time.time()
    #a = BL_Trace()
    #print(a)
    for i in range(0,100):#number of steps. The goal is to cover a total retardation of 0.15mm in 100nm steps

        ser.write(b'1MVR0.01\r') #move by 100nm in positive direction

        #time.sleep(1)
        ser.flush()
        #ser.write(b'1WST\r')
        #time.sleep(1)
        #ser.flush()
        ser.write(b'1POS?\r')
        pos = ser.readline()
        pos_str = str(pos)
        pos_splt = pos.strip().split(b",")
        enc_pos_str = pos_splt[1]
        enc_pos_val = float(enc_pos_str)
        print(enc_pos_val)
        pos_array = np.append(pos_array, enc_pos_val)
        BL_Trace()
        print("trace {}",format(BL_Trace(0.01, BL_SYNCHRONOUS)))
        data1 = BL_Acquire() #acquire data from BitScope
        data_avg = np.average(data1)
        #time.sleep(1)
        ser.flush()

        DATA = np.append(DATA,data_avg) #data_avg

        #ser.write(b'1WST\r')
        #time.sleep(1)
        #ser.flush()

    #tmin = old_time
    #tmax = time.perf_counter()
   # old_time = tmax
   # t_vec1 = np.linspace(tmin,tmax,2000)
  #  dt = t_vec1[1]-t_vec1[0]
  ##  w_vec1 = 2*np.pi/(2*dt)*np.linspace(-1,1,len(y))
  #  dw = w_vec1[1]-w_vec1[0]
 #   yw_vec1 = np.fft.fftshift(np.fft.fft(np.fft.fftshift(y)))
 #   count = len(yw_vec1)

    t1 = time.time()
    print(t1-t0)
    return(pos_array, DATA)

home()
params()
#voltage = record()
#global t0
#t0 = time.time()

(delay,voltage) = record()
ddelay = delay[1] - delay[0]
wavnum_vec = 2*np.pi/(2*ddelay)*np.linspace(-1,1,len(voltage))
dwave = 2*np.pi/(len(voltage)*ddelay)
dwavnum = wavnum_vec[1]-wavnum_vec[0]
vw = np.fft.fftshift(np.fft.fft(np.fft.fftshift(voltage)))
print(len(voltage))
print(len(delay))

plt.figure()
plt.plot(delay[1:],voltage[1:]-1.725, 'o-')
#plt.ylim(0,4)
#plt.xlim(0,len(delay))
plt.xlabel("Retardation (mm)")
plt.ylabel("Voltage (V)")
plt.title("Interferogram as a Function of Stage Delay")
plt.show()

#plt.figure()
#plt.plot(wavnum_vec,np.abs(vw))
#plt.title("Spectrum")
#plt.xlabel("Wavenumber (1/mm)")
#plt.ylabel("Intensity (a.u)")
#plt.show()

#plt.figure()
#plt.plot(delay[1:])
#plt.xlabel("Step number")
#plt.ylabel("Position (mm)")
#plt.show()






